# -*- coding: utf-8 -*-
"""currency-.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17nN2qmdvL1C0mqc1rPGWxFcf5L-kPKsk
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

# Data Augmentation for Training Data
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

# Only Rescaling for Validation Data
test_datagen = ImageDataGenerator(rescale=1./255)

# Loading Data
train_data = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/Dataset/train.currency',
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical'
)

test_data = test_datagen.flow_from_directory(
    '/content/drive/MyDrive/Dataset/test.currency',
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical'
)

# Building the Model
model = Sequential()

# Convolutional Layers with Batch Normalization and Dropout
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(256, (3, 3), activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())

# Fully Connected Layers
model.add(Dense(256, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))

# Output Layer
model.add(Dense(13, activation='softmax'))  # For 13 classes

# Compiling the Model
model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

# Callbacks for Early Stopping and Learning Rate Reduction
early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)
reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, min_lr=1e-6)

# Training the Model
history = model.fit(
    train_data,
    validation_data=test_data,
    epochs=50,
    callbacks=[early_stopping, reduce_lr]
)

# Save the Model
model.save('optimized_currency_classifier_model.h5')

# Evaluate the Model
loss, accuracy = model.evaluate(test_data)
print(f"Test Accuracy: {accuracy * 100:.2f}%")

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import load_img, img_to_array

# Load the Saved Model
model = tf.keras.models.load_model('optimized_currency_classifier_model.h5')

# Define Class Labels (Modify this according to your dataset)
class_labels = ['10_new', '10_old', '20_new', '20_old', '50_new', '50_old',
                '100_new', '100_old', '200_new', '200_old', '500_new', '500_old', 'fake']

# Function to Predict the Class of an Image
def predict_image(image_path):
    # Load and Preprocess the Image
    img = load_img(image_path, target_size=(128, 128))  # Resize to match the input size of the model
    img_array = img_to_array(img) / 255.0  # Normalize pixel values
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension

    # Make Predictions
    predictions = model.predict(img_array)
    predicted_class = np.argmax(predictions)  # Get the index of the highest probability
    predicted_label = class_labels[predicted_class]
    confidence = np.max(predictions) * 100  # Get the highest probability as percentage

    # Show the Image with Predicted Label
    plt.imshow(img)
    plt.title(f"Predicted: {predicted_label} ({confidence:.2f}%)")
    plt.axis('off')
    plt.show()

    return predicted_label, confidence

# Example Usage
image_path = '/content/drive/MyDrive/Dataset/IMG_1666270158479.jpg'  # Replace with the path to your test image
predicted_label, confidence = predict_image(image_path)
print(f"Prediction: {predicted_label}, Confidence: {confidence:.2f}%")